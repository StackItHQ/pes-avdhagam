function onEdit(e) {
  if (!e || !e.source || !e.range) {
    Logger.log('Event object is missing properties.');
    return;
  }

  var spreadsheet = e.source;
  var range = e.range;
  var sheetName = range.getSheet().getName();
  var row = range.getRow();
  var column = range.getColumn();
  var oldValue = e.oldValue || '';
  var newValue = range.getValue();

  var logMessage = Utilities.formatString(
    "Timestamp: %s - Edit made in sheet '%s' at cell %s%s. Old value: '%s', New value: '%s'",
    new Date().toISOString(),
    sheetName,
    columnToLetter(column),
    row,
    oldValue,
    newValue
  );

  Logger.log(logMessage);
  logToSheet(spreadsheet, logMessage);

  var payload = {
    sheetName: sheetName,
    row: row,
    column: column,
    oldValue: oldValue,
    newValue: newValue
  };

  var options = {
    'contentType': 'application/json',
    'payload': JSON.stringify(payload),
    'muteHttpExceptions': true
  };

  var backendUrl = 'https://453e-49-207-192-109.ngrok-free.app/api/update';

  // Determine whether to use POST or PUT
  if (oldValue === '') {
    options.method = 'post';
  } else {
    options.method = 'put';
  }

  try {
    var response = UrlFetchApp.fetch(backendUrl, options);
    var responseCode = response.getResponseCode();
    var responseBody = response.getContentText();
    
    Logger.log('Request Method: ' + options.method);
    Logger.log('Response Code: ' + responseCode);
    Logger.log('Response Body: ' + responseBody);
    
    if (responseCode === 200 || responseCode === 201) {
      Logger.log('Successfully sent to backend.');
    } else {
      Logger.log('Failed to send to backend. Status code: ' + responseCode);
    }
  } catch (error) {
    Logger.log('Error sending data to backend: ' + error.toString());
    if (error.message) {
      Logger.log('Error message: ' + error.message);
    }
  }
}

// Helper functions (columnToLetter and logToSheet) remain the same

// Helper function to convert column number to letter
function columnToLetter(column) {
  var temp, letter = '';
  while (column > 0) {
    temp = (column - 1) % 26;
    letter = String.fromCharCode(temp + 65) + letter;
    column = (column - temp - 1) / 26;
  }
  return letter;
}

// Function to log messages to a separate sheet
function logToSheet(spreadsheet, message) {
  var logSheet = spreadsheet.getSheetByName("Edit Logs");
  
  // Create the log sheet if it doesn't exist
  if (!logSheet) {
    logSheet = spreadsheet.insertSheet("Edit Logs");
    logSheet.appendRow(["Timestamp", "Edit Log"]);
  }
  
  // Append the new log entry
  logSheet.appendRow([new Date(), message]);
  Logger.log(message);
}





